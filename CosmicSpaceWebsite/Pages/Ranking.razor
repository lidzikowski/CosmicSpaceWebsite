@page "/ranking"

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject ILocalStorageService localStorage

@inject IModalService Modal



<h1>Ranking</h1>

@if (Pilots == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div>
        <table class="table table-hover table-dark">
            <thead>
                <tr>
                    <th scope="col">Nickname</th>
                    <th scope="col">Statek</th>
                    <th scope="col">Level</th>
                    <th scope="col">Doświadczenie</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>

                @foreach (Pilots pilot in Pilots)
                {
                    <tr>
                        <td>@pilot.Nickname</td>
                        <td>@pilot.Ship.Shipname</td>
                        <td>@pilot.Level</td>
                        <td>@pilot.Experience</td>
                        <td>
                            <button data-toggle="modal" data-target="#exampleModalCenter" @onclick="@(e =>
     {
         var parameters = new ModalParameters();
         parameters.Add(nameof(Pilots), pilot);
         Modal.Show<AchievementModal>("Osiągnięcia gracza", parameters);
     })">
                                Osiągnięcia
                            </button>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<Pilots> Pilots;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //#if DEBUG
            //            await localStorage.ClearAsync();
            //#endif

            Pilots = await localStorage.GetItemAsync<IEnumerable<Pilots>>("allPilots");

            if (Pilots == null)
            {
                Pilots = await Utils.HttpGetAsync<IEnumerable<Pilots>>(Http, ApiTypeService.game, ApiService.GetPilots);
                Pilots = Pilots.OrderByDescending(o => o.Experience);
                await localStorage.SetItemAsync("allPilots", Pilots);
            }
        }
        catch { }
    }
}